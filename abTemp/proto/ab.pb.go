// Code generated by protoc-gen-go.
// source: ab.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	ab.proto

It has these top-level messages:
	AbPubRequest
	AbErrorMsg
	AbSubRequest
	AbFwdPublication
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AbPubRequest struct {
	PublisherID   int64  `protobuf:"varint,1,opt,name=PublisherID" json:"PublisherID,omitempty"`
	PublicationID int64  `protobuf:"varint,2,opt,name=PublicationID" json:"PublicationID,omitempty"`
	Publication   []byte `protobuf:"bytes,3,opt,name=Publication,proto3" json:"Publication,omitempty"`
}

func (m *AbPubRequest) Reset()         { *m = AbPubRequest{} }
func (m *AbPubRequest) String() string { return proto1.CompactTextString(m) }
func (*AbPubRequest) ProtoMessage()    {}

type AbErrorMsg struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *AbErrorMsg) Reset()         { *m = AbErrorMsg{} }
func (m *AbErrorMsg) String() string { return proto1.CompactTextString(m) }
func (*AbErrorMsg) ProtoMessage()    {}

type AbSubRequest struct {
	SubscriberID int64 `protobuf:"varint,1,opt,name=SubscriberID" json:"SubscriberID,omitempty"`
}

func (m *AbSubRequest) Reset()         { *m = AbSubRequest{} }
func (m *AbSubRequest) String() string { return proto1.CompactTextString(m) }
func (*AbSubRequest) ProtoMessage()    {}

type AbFwdPublication struct {
	PublisherID   int64  `protobuf:"varint,1,opt,name=PublisherID" json:"PublisherID,omitempty"`
	PublicationID int64  `protobuf:"varint,2,opt,name=PublicationID" json:"PublicationID,omitempty"`
	BrokerID      int64  `protobuf:"varint,3,opt,name=BrokerID" json:"BrokerID,omitempty"`
	Publication   []byte `protobuf:"bytes,4,opt,name=Publication,proto3" json:"Publication,omitempty"`
}

func (m *AbFwdPublication) Reset()         { *m = AbFwdPublication{} }
func (m *AbFwdPublication) String() string { return proto1.CompactTextString(m) }
func (*AbFwdPublication) ProtoMessage()    {}

func init() {
	proto1.RegisterType((*AbPubRequest)(nil), "proto.AbPubRequest")
	proto1.RegisterType((*AbErrorMsg)(nil), "proto.AbErrorMsg")
	proto1.RegisterType((*AbSubRequest)(nil), "proto.AbSubRequest")
	proto1.RegisterType((*AbFwdPublication)(nil), "proto.AbFwdPublication")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for AbPubBroker service

type AbPubBrokerClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (AbPubBroker_PublishClient, error)
}

type abPubBrokerClient struct {
	cc *grpc.ClientConn
}

func NewAbPubBrokerClient(cc *grpc.ClientConn) AbPubBrokerClient {
	return &abPubBrokerClient{cc}
}

func (c *abPubBrokerClient) Publish(ctx context.Context, opts ...grpc.CallOption) (AbPubBroker_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AbPubBroker_serviceDesc.Streams[0], c.cc, "/proto.AbPubBroker/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &abPubBrokerPublishClient{stream}
	return x, nil
}

type AbPubBroker_PublishClient interface {
	Send(*AbPubRequest) error
	Recv() (*AbErrorMsg, error)
	grpc.ClientStream
}

type abPubBrokerPublishClient struct {
	grpc.ClientStream
}

func (x *abPubBrokerPublishClient) Send(m *AbPubRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *abPubBrokerPublishClient) Recv() (*AbErrorMsg, error) {
	m := new(AbErrorMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AbPubBroker service

type AbPubBrokerServer interface {
	Publish(AbPubBroker_PublishServer) error
}

func RegisterAbPubBrokerServer(s *grpc.Server, srv AbPubBrokerServer) {
	s.RegisterService(&_AbPubBroker_serviceDesc, srv)
}

func _AbPubBroker_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AbPubBrokerServer).Publish(&abPubBrokerPublishServer{stream})
}

type AbPubBroker_PublishServer interface {
	Send(*AbErrorMsg) error
	Recv() (*AbPubRequest, error)
	grpc.ServerStream
}

type abPubBrokerPublishServer struct {
	grpc.ServerStream
}

func (x *abPubBrokerPublishServer) Send(m *AbErrorMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *abPubBrokerPublishServer) Recv() (*AbPubRequest, error) {
	m := new(AbPubRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AbPubBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AbPubBroker",
	HandlerType: (*AbPubBrokerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _AbPubBroker_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

// Client API for AbSubBroker service

type AbSubBrokerClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (AbSubBroker_SubscribeClient, error)
}

type abSubBrokerClient struct {
	cc *grpc.ClientConn
}

func NewAbSubBrokerClient(cc *grpc.ClientConn) AbSubBrokerClient {
	return &abSubBrokerClient{cc}
}

func (c *abSubBrokerClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (AbSubBroker_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AbSubBroker_serviceDesc.Streams[0], c.cc, "/proto.AbSubBroker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &abSubBrokerSubscribeClient{stream}
	return x, nil
}

type AbSubBroker_SubscribeClient interface {
	Send(*AbSubRequest) error
	Recv() (*AbFwdPublication, error)
	grpc.ClientStream
}

type abSubBrokerSubscribeClient struct {
	grpc.ClientStream
}

func (x *abSubBrokerSubscribeClient) Send(m *AbSubRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *abSubBrokerSubscribeClient) Recv() (*AbFwdPublication, error) {
	m := new(AbFwdPublication)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AbSubBroker service

type AbSubBrokerServer interface {
	Subscribe(AbSubBroker_SubscribeServer) error
}

func RegisterAbSubBrokerServer(s *grpc.Server, srv AbSubBrokerServer) {
	s.RegisterService(&_AbSubBroker_serviceDesc, srv)
}

func _AbSubBroker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AbSubBrokerServer).Subscribe(&abSubBrokerSubscribeServer{stream})
}

type AbSubBroker_SubscribeServer interface {
	Send(*AbFwdPublication) error
	Recv() (*AbSubRequest, error)
	grpc.ServerStream
}

type abSubBrokerSubscribeServer struct {
	grpc.ServerStream
}

func (x *abSubBrokerSubscribeServer) Send(m *AbFwdPublication) error {
	return x.ServerStream.SendMsg(m)
}

func (x *abSubBrokerSubscribeServer) Recv() (*AbSubRequest, error) {
	m := new(AbSubRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AbSubBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AbSubBroker",
	HandlerType: (*AbSubBrokerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AbSubBroker_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
