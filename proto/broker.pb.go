// Code generated by protoc-gen-go.
// source: broker.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	broker.proto

It has these top-level messages:
	Publication
	PubResponse
	SubRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Publication struct {
	PubType       int32    `protobuf:"varint,1,opt,name=PubType" json:"PubType,omitempty"`
	PublisherID   int64    `protobuf:"varint,2,opt,name=PublisherID" json:"PublisherID,omitempty"`
	PublicationID int64    `protobuf:"varint,3,opt,name=PublicationID" json:"PublicationID,omitempty"`
	Topic         int64    `protobuf:"varint,4,opt,name=Topic" json:"Topic,omitempty"`
	BrokerID      int64    `protobuf:"varint,5,opt,name=BrokerID" json:"BrokerID,omitempty"`
	Content       []byte   `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
	MACs          [][]byte `protobuf:"bytes,7,rep,name=MACs,proto3" json:"MACs,omitempty"`
}

func (m *Publication) Reset()         { *m = Publication{} }
func (m *Publication) String() string { return proto1.CompactTextString(m) }
func (*Publication) ProtoMessage()    {}

type PubResponse struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *PubResponse) Reset()         { *m = PubResponse{} }
func (m *PubResponse) String() string { return proto1.CompactTextString(m) }
func (*PubResponse) ProtoMessage()    {}

type SubRequest struct {
	SubscriberID int64   `protobuf:"varint,1,opt,name=SubscriberID" json:"SubscriberID,omitempty"`
	Topics       []int64 `protobuf:"varint,2,rep,name=Topics" json:"Topics,omitempty"`
}

func (m *SubRequest) Reset()         { *m = SubRequest{} }
func (m *SubRequest) String() string { return proto1.CompactTextString(m) }
func (*SubRequest) ProtoMessage()    {}

func init() {
	proto1.RegisterType((*Publication)(nil), "proto.Publication")
	proto1.RegisterType((*PubResponse)(nil), "proto.PubResponse")
	proto1.RegisterType((*SubRequest)(nil), "proto.SubRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PubBroker service

type PubBrokerClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (PubBroker_PublishClient, error)
}

type pubBrokerClient struct {
	cc *grpc.ClientConn
}

func NewPubBrokerClient(cc *grpc.ClientConn) PubBrokerClient {
	return &pubBrokerClient{cc}
}

func (c *pubBrokerClient) Publish(ctx context.Context, opts ...grpc.CallOption) (PubBroker_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PubBroker_serviceDesc.Streams[0], c.cc, "/proto.PubBroker/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubBrokerPublishClient{stream}
	return x, nil
}

type PubBroker_PublishClient interface {
	Send(*Publication) error
	Recv() (*PubResponse, error)
	grpc.ClientStream
}

type pubBrokerPublishClient struct {
	grpc.ClientStream
}

func (x *pubBrokerPublishClient) Send(m *Publication) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubBrokerPublishClient) Recv() (*PubResponse, error) {
	m := new(PubResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PubBroker service

type PubBrokerServer interface {
	Publish(PubBroker_PublishServer) error
}

func RegisterPubBrokerServer(s *grpc.Server, srv PubBrokerServer) {
	s.RegisterService(&_PubBroker_serviceDesc, srv)
}

func _PubBroker_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubBrokerServer).Publish(&pubBrokerPublishServer{stream})
}

type PubBroker_PublishServer interface {
	Send(*PubResponse) error
	Recv() (*Publication, error)
	grpc.ServerStream
}

type pubBrokerPublishServer struct {
	grpc.ServerStream
}

func (x *pubBrokerPublishServer) Send(m *PubResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubBrokerPublishServer) Recv() (*Publication, error) {
	m := new(Publication)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PubBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PubBroker",
	HandlerType: (*PubBrokerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _PubBroker_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

// Client API for SubBroker service

type SubBrokerClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (SubBroker_SubscribeClient, error)
}

type subBrokerClient struct {
	cc *grpc.ClientConn
}

func NewSubBrokerClient(cc *grpc.ClientConn) SubBrokerClient {
	return &subBrokerClient{cc}
}

func (c *subBrokerClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (SubBroker_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SubBroker_serviceDesc.Streams[0], c.cc, "/proto.SubBroker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &subBrokerSubscribeClient{stream}
	return x, nil
}

type SubBroker_SubscribeClient interface {
	Send(*SubRequest) error
	Recv() (*Publication, error)
	grpc.ClientStream
}

type subBrokerSubscribeClient struct {
	grpc.ClientStream
}

func (x *subBrokerSubscribeClient) Send(m *SubRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *subBrokerSubscribeClient) Recv() (*Publication, error) {
	m := new(Publication)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SubBroker service

type SubBrokerServer interface {
	Subscribe(SubBroker_SubscribeServer) error
}

func RegisterSubBrokerServer(s *grpc.Server, srv SubBrokerServer) {
	s.RegisterService(&_SubBroker_serviceDesc, srv)
}

func _SubBroker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SubBrokerServer).Subscribe(&subBrokerSubscribeServer{stream})
}

type SubBroker_SubscribeServer interface {
	Send(*Publication) error
	Recv() (*SubRequest, error)
	grpc.ServerStream
}

type subBrokerSubscribeServer struct {
	grpc.ServerStream
}

func (x *subBrokerSubscribeServer) Send(m *Publication) error {
	return x.ServerStream.SendMsg(m)
}

func (x *subBrokerSubscribeServer) Recv() (*SubRequest, error) {
	m := new(SubRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SubBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SubBroker",
	HandlerType: (*SubBrokerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _SubBroker_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
